
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000e94 memsz 0x00000e94 flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00003800 memsz 0x00003800 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000038  00007e5c  00007e5c  00000e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00008000  00008000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000189  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c9  00000000  00000000  000049e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a3  00000000  00000000  00004aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000126  00000000  00000000  00004b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007e5c l    d  .eh_frame	00000000 .eh_frame
00008000 l    d  .data	00000000 .data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e36 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000b000 g     O .data	00000800 gdt_table
00008000 g     O .data	00001000 map_phy_buffer
00007e3c g     F .text	00000020 os_init
00007c00 g       .text	00000000 _start
0000b800 g       .data	00000000 __bss_start
00009000 g     O .data	00001000 pg_dir
0000b800 g       .data	00000000 _edata
0000b800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
	// 以下是代码区
 	.text
	// 声明os_init在外部定义
	.extern os_init
_start:
	mov $0,%ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax,%ds
	mov %ax,%es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax,%ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax,%gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax,%fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:


read_self_all:
	mov $_start_32, %bx	//读取到的内存地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		//ch:磁道号,c1起始扇区号
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240, %ax	//ah:0x02读磁盘命令, al:40 读64个扇区
	mov $0x80, %dx		//磁头号, 第一个磁盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli					//关中断
    7c23:	fa                   	cli    
	lgdt gdt_desc		//读相应数据到gdtr, 注：加中括号不识别
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	36 7e 66             	ss jle 7c90 <read_self_all+0x7d>
	mov $1, %eax
    7c2a:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax			//讲CR0寄存器PE设为1, 表示打开保护模式
    7c2f:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_COOE_SEG, $_start_32			// 这个跳转会将CS(代码段寄存器)设为8, 跳转, 之后CPU进入保护模式
    7c32:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:

	.code32					//生成32位指令
	.text

_start_32:
	mov $KERNEL_DATA_SEG ,%ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax,%ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax,%es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax,%ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax,%gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax,%fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 24 00 00 00       	call   7e3c <os_init>

	//将cr3指向页目录表
	mov $pg_dir, %eax
    7e18:	b8 00 90 00 00       	mov    $0x9000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	//将cr4寄存器第四位置1，该位控制4Mb映射关系
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1<<4) ,%eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	//控制分页机制的位
	orl $(1<<31) ,%eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0



	jmp .
    7e34:	eb fe                	jmp    7e34 <_start_32+0x34>

00007e36 <gdt_desc>:
    7e36:	ff 07                	incl   (%edi)
    7e38:	00                   	.byte 0x0
    7e39:	b0 00                	mov    $0x0,%al
	...

00007e3c <os_init>:
    [KERNEL_COOE_SEG / 8] = {0xffff, 0x0000, 0x9a00, 0x00cf},
    [KERNEL_DATA_SEG / 8] = {0xffff, 0x0000, 0x9200, 0x00cf},
};

void os_init(void)
{
    7e3c:	55                   	push   %ebp
    7e3d:	89 e5                	mov    %esp,%ebp
    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7e3f:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7e44:	83 c8 07             	or     $0x7,%eax
    7e47:	a3 00 98 00 00       	mov    %eax,0x9800
    page_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7e4c:	b8 00 80 00 00       	mov    $0x8000,%eax
    7e51:	83 c8 07             	or     $0x7,%eax
    7e54:	a3 00 a0 00 00       	mov    %eax,0xa000
    7e59:	90                   	nop
    7e5a:	5d                   	pop    %ebp
    7e5b:	c3                   	ret    
